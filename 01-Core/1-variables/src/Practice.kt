import java.util.EventObject

/*
Вот задания для практики на темы, связанные с переменными, константами и управлением потоком выполнения в Kotlin:
1. Создайте несколько `val` переменных для хранения данных, значения которых можно вычислить только в процессе выполнения.
   Используйте одну из переменных как флаг для управления выполнением программы.
2. Создайте переменную-счетчик и увеличивайте её в цикле `for` до 100. Выведите значение после завершения цикла.
3. Инициализируйте переменную `var` для хранения текущего уровня. При переходе на следующий уровень увеличьте её на 1.
   Добавьте проверку, что уровень не превышает максимального значения.
4. Создайте переменную-ссылку на объект, например, пользователя, и добавьте условие для вывода на экран имени
   этого пользователя только в случае, если оно не пустое.
5. Используйте переменные для хранения результата умножения двух чисел и выполните промежуточное вычисление
   с этими числами. Выведите результат.
6. Создайте переменную-флаг и используйте её в условии для вывода сообщения об успехе или ошибке в зависимости от состояния.
7. Создайте переменную для хранения функции, которая принимает строку и выводит её в консоль. Вызовите эту функцию с любым текстом.
8. Используйте `lazy` для отложенной инициализации переменной, которая содержит результат вычислений, и выведите значение в консоль при первом обращении.
9. Определите `lateinit var` переменную для хранения объекта, который инициализируется только после выполнения определенного условия.
10. Создайте `val` переменную, которая получает разные значения в зависимости от условия `if`. Выведите результат в зависимости от выполнения условия.
11. Создайте `val` переменную с неизменяемым объектом, например, списком. Затем измените элементы этого объекта и выведите результат.
12. Создайте `val` переменную с неизменяемой ссылкой на изменяемый список. Добавьте и удалите элементы из списка, выведите его содержимое после каждого изменения.
13. Используйте функцию высшего порядка `apply` для инициализации объекта, добавьте в него несколько значений и выведите результат.
14. Создайте переменную с типом `Double` и приведите её к типу `Int`, выведите оба значения.
15. Используя выражение `if`, определите переменную, которая получает значение в зависимости от возраста человека. Выведите соответствующий документ.
16. Создайте переменную `max`, в которую сохраняется максимальное значение из двух чисел, используя блоки `if-else`.
17. Создайте выражение `if`, которое получает максимальное значение из двух переменных без блоков `if-else`.
18. Используйте тернарный оператор `?:`, чтобы присвоить значение переменной только в случае, если объект равен null.
19. Определите переменные и проверьте их равенство или неравенство, используя операторы `==` и `!=`, затем выведите результаты.
20. Создайте `when` выражение, которое проверяет значение переменной `Int` и выводит сообщение в зависимости от этого значения.
21. Используйте `when` для выполнения одного действия при нескольких значениях одной переменной.
22. Определите `when`, который сравнивает переменную с диапазоном значений и проверяет её тип с помощью `is`.
23. Напишите `when` выражение, проверяющее, в каком диапазоне находится число, и выведите сообщение, если оно внутри или вне диапазона.
24. Используйте `when` для получения переменной внутри ветки `when` выражения. Проверьте, что переменная соответствует
    требуемому типу, и преобразуйте еей в нужному типу и обработайте её в зависимости от результата.
25. Определите функцию, которая принимает `Int` и использует `when`, чтобы вывести, является ли число положительным, отрицательным или равным нулю.
26. Используйте оператор `throw` для выбрасывания исключения в определенном условии.
27. Используйте `try-catch` блок, чтобы перехватить исключение и обработать его, выведя соответствующее сообщение.
28. Определите переменную, проверьте, входит ли она в диапазон, используя оператор `in`, и выведите результат.
29. Определите переменную, проверьте, не входит ли она в диапазон, используя оператор `!in`, и выведите результат.
30. Удалите точки из строки с использованием функции, которая проверяет каждый символ строки на условие.
*/

fun main() {
    //
}
































