package control_flow

/*Выражение if с тернарным синтаксисом:
1. найти минимальное из двух чисел, используя выражение if, и выведите результат.
Условное присваивание:
2. Создайте переменную isAdult, которая проверяет, больше ли humanAge или равно 18, и присвойте ей соответствующее логическое значение. Выведите результат.
Обычное использование if:
3. Используйте обычное выражение if, чтобы определить большее из двух чисел a и b и присвойте его переменной maxRegular. Выведите результат.
If с блоком else:
4. Реализуйте блок if-else, чтобы проверить, является ли число n четным или нечетным, и выведите "Четное" или "Нечетное" соответственно.
Оператор Элвиса:
5. Создайте объект User с ненулевым именем и используйте оператор Элвиса, чтобы присвоить имя переменной userName. Выведите userName.
Оператор when:
6. Используйте оператор when, чтобы вывести сообщение в зависимости от значения целого числа day (от 1 до 7), представляющего дни недели.
When с несколькими значениями:
7. Измените оператор when, чтобы выводить "Выходной" для значений 6 и 7, и "Будний день" для остальных значений.
When с выражениями:
8. Используйте оператор when, чтобы проверить, является ли число num положительным, отрицательным или нулем, и выведите соответствующее сообщение.
When с проверкой типа:
9. Реализуйте функцию, которая принимает тип Any и использует оператор when, чтобы вывести, является ли ввод String, Int или другим типом.
Логические операторы:
10. Используйте логические операторы, чтобы проверить, находится ли число n в диапазоне от 10 до 20, и выведите соответствующее сообщение.
Комбинированные логические операторы:
11. Измените код так, чтобы использовать комбинированные логические операторы для проверки, может ли пользователь продолжить,
если он вошел в систему и имеет действительный токен, или если он является администратором. Выведите результат.
Вложенные if-выражения:
12. Реализуйте вложенные if-выражения для проверки, может ли пользователь продолжить, используя переменные isLoggedIn, hasValidToken и isAdmin. Выведите результат.
Функция isUserEligible:
13. Напишите функцию isUserEligible, которая принимает два параметра: isActive и hasMembership, и возвращает true, если оба параметра истинны. Выведите результат для заданных значений.
Функция getStatusMessage:
14. Реализуйте функцию getStatusMessage, которая принимает параметр isActive и возвращает строку "User is inactive", если пользователь не активен, и "User is active" в противном случае. Выведите результат.
Итерация с forEach:
15. Используйте метод forEach для итерации по списку items и выведите каждый элемент.
Итерация с forEachIndexed:
16. Используйте метод forEachIndexed для итерации по списку itemsForEachIndexed и выведите каждый элемент вместе с его индексом.
Использование repeat:
17. Используйте функцию repeat, чтобы вывести строку "Hello!" пять раз.
Цикл for с withIndex:
18. Используйте цикл for с методом withIndex для итерации по списку itemsWithIndex и выведите каждый элемент вместе с его индексом.
Создание последовательности с generateSequence:
19. Используйте функцию generateSequence, чтобы создать последовательность нечетных чисел, начиная с 1, и выведите первые пять элементов.
Использование меток с break:
20. Реализуйте вложенные циклы с использованием меток, чтобы выйти из внешнего цикла, когда i равно 3.
Локальный возврат внутри лямбды:
21. Используйте локальный возврат внутри лямбды с явной меткой, чтобы пропустить элемент 3 в списке и вывести остальные элементы.
Локальный возврат с неявной меткой:
22. Используйте локальный возврат внутри лямбды с неявной меткой, чтобы пропустить элемент 3 в списке и вывести остальные элементы.
Нелокальный возврат из лямбды:
23. Используйте вложенную лямбду и нелокальный возврат, чтобы выйти из лямбды, когда элемент равен 3, и вывести остальные элементы.
Рекурсивная функция factorial:
24. Реализуйте хвостовую рекурсию для вычисления факториала числа n и выведите результат для n = 5.
*/

val numbers: MutableList<Int?> = (0..10).toMutableList()

fun main() {
    // 24. Реализуйте хвостовую рекурсию для вычисления факториала числа n и выведите результат для n = 5.
    tailrec fun factorial(n: Int, acc: Int=1): Int {
        return if (n <= 1) acc else factorial(n - 1, acc * n)
    }
}











