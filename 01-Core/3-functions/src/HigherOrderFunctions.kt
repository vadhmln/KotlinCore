// Абстракция и переиспользование кода: Функции высшего порядка позволяют избежать дублирования кода
// функция List.filter принимает предикат (функция) в качестве аргумента и возвращает новый список,
// содержащий только элементы, удовлетворяющие этому предикату.

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5, 6)
    val evens = numbers.filter { it % 2 == 0 }
    println(evens) // Вывод: [2, 4, 6]

// Представьте, что у вас есть несколько списков чисел, и вы хотите отфильтровать четные числа из каждого списка.
// если не использовать функцию высшего порядка filter пришлось бы написать цикл для каждого списка,
// проверяя каждое число на четность, что привело бы к дублированию кода.
    val numbers1 = listOf(1, 2, 3, 4, 5, 6)
    val evens1 = mutableListOf<Int>()
    for (num in numbers1) {
        if (num % 2 == 0) {
            evens1.add(num)
        }
    }

    val numbers2 = listOf(7, 8, 9, 10, 11, 12)
    val evens2 = mutableListOf<Int>()
    for (num in numbers2) {
        if (num % 2 == 0) {
            evens2.add(num)
        }
    }

// С использованием функции высшего порядка filter, вы можете абстрагировать этот процесс и избежать дублирования кода:
    val numbers3 = listOf(1, 2, 3, 4, 5, 6)
    val evens3 = numbers3.filter { it % 2 == 0 }

    val numbers4 = listOf(7, 8, 9, 10, 11, 12)
    val evens4 = numbers4.filter { it % 2 == 0 }

}