import java.time.Duration
import java.util.*
import java.time.LocalTime

// пример функции на Kotlin, которая вычисляет сдвиг времени между двумя моментами:

fun calculateTimeShift(t1: Date, t2: Date): Long {
    val dt1 = t1.time
    val dt2 = t2.time

    val diff = dt2 - dt1

    // если diff больше 86400 (количество секунд в одном дне), то мы вычитаем 86400 из diff,
    // чтобы получить разницу между двумя моментами времени в секундах, иначе мы возвращаем diff без изменений.
    // Это может быть полезно, если вы хотите вычислить разницу между двумя моментами времени в секундах,
    // но не хотите учитывать полные дни в этом вычислении. Например, если вы хотите вычислить разницу между
    // двумя моментами времени в рабочих часах, вы можете использовать этот код, чтобы исключить выходные дни
    // из вычислений.
    return when {
        diff > 86400 -> diff - 86400
        else -> diff
    }
}
// Здесь функция принимает два момента времени (в формате Date) и возвращает сдвиг
// времени в секундах. Если разница между моментами больше 24 часов,
// то функция возвращает разницу за вычетом 24 часов.

fun timeDifference(start: String, end: String): Duration {
    val startTime = LocalTime.parse(start)
    val endTime = LocalTime.parse(end)
    return Duration.between(startTime, endTime)
}
// Первый пример вычисляет разницу между двумя моментами в миллисекундах и возвращает результат в
// виде длинного целого числа. Второй пример использует класс Duration из пакета java.time для вычисления
// разницы между двумя моментами в виде объекта Duration. Оба примера могут быть использованы для вычисления
// сдвига времени между двумя моментами.